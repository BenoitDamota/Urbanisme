.TH "LocalSearch" 3 "Jeudi 19 Mai 2016" "Version 1.0" "Urbanisme" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LocalSearch \- La classe chargée d'effectuer des recherches locales sur les différentes solutions TODO ajouter les entrées et sorties\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <localsearch\&.h>\fP
.SS "Types publics"

.in +1c
.ti -1c
.RI "typedef std::list< \fBCoordinates\fP > \fBPath\fP"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBField\fP & \fBget_field\fP ()"
.br
.ti -1c
.RI "\fBEvaluation\fP & \fBget_evaluation\fP ()"
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "\fBLocalSearch\fP (\fBField\fP *_field, const \fBParameters\fP *_params)"
.br
.ti -1c
.RI "\fBLocalSearch\fP (const \fBLocalSearch\fP &other)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBinitSolution\fP ()"
.br
.ti -1c
.RI "std::list< \fBPath\fP * > * \fBgetPaths\fP (const \fBCoordinates\fP &coord1, const \fBCoordinates\fP &coord2)"
.br
.ti -1c
.RI "float \fBgainPath\fP (\fBPath\fP *path)"
.br
.ti -1c
.RI "int \fBaddRoadUsable\fP () const "
.br
.ti -1c
.RI "float \fBaddRoadsAccess\fP (unsigned nbToAdd)"
.br
.in -1c
.in -1c
.SH "Description détaillée"
.PP 
La classe chargée d'effectuer des recherches locales sur les différentes solutions TODO ajouter les entrées et sorties\&. 
.SH "Documentation des définitions de type membres"
.PP 
.SS "typedef std::list<\fBCoordinates\fP> \fBLocalSearch::Path\fP"
Un chemin est une suite de coordonnées qu'on suppose adjacentes 
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "LocalSearch::LocalSearch (\fBField\fP * _field, const \fBParameters\fP * _params)"
Constructeur d'une recherche locale à partir d'une surface existante et des paramètres des routes\&. La surface sera modifiée 
.PP
\fBParamètres:\fP
.RS 4
\fI_field\fP Surface déjà instanciée 
.br
\fI_params\fP Paramètres des routes
.RE
.PP
.SS ""
.PP
Constructeurs 
.SS ""

.SS "LocalSearch::LocalSearch (const \fBLocalSearch\fP & other)"
Constructeur d'une recherche locale par recopie La surface de l'autre instance est recopiée 
.PP
\fBParamètres:\fP
.RS 4
\fIother\fP Instance à recopier 
.RE
.PP

.SH "Documentation des fonctions membres"
.PP 
.SS "float LocalSearch::addRoadsAccess (unsigned nbToAdd)"
Tente l'ajout d'un chemin (série de routes) avec pour objectif d'améliorer l'accessibilité\&. 
.PP
\fBRenvoie:\fP
.RS 4
faux si aucune route n'a pu être ajoutée car il n'y a aucun placement de chemin permettant d'obtenir une solution réalisable avec une accessibilité meilleures ou équivalente\&. 
.RE
.PP

.SS "int LocalSearch::addRoadUsable () const"
Tente l'ajout d'une route avec pour objectif d'augmenter le nombre de parcelles exploitables\&. 
.PP
\fBRenvoie:\fP
.RS 4
faux si aucune route n'a pu être ajoutée car il n'y a aucun placement de route permettant d'obtenir une solution réalisable avec un nombre de parcelles exploitables supérieur ou égal au nombre courant\&. 
.RE
.PP
TODO est-ce utile de soustraire le nombre de voisin, mettre un coef, \&.\&.\&. ? OUI, ça a une utilité, pour éviter de coller 2 routes 
.SS "float LocalSearch::gainPath (\fBPath\fP * path)"
Calcule le gain hypotéthique en accessibilité lors de l'ajout d'un chemin donné 
.PP
\fBParamètres:\fP
.RS 4
\fIpath\fP Chemin testé (liste de routes) 
.RE
.PP
\fBRenvoie:\fP
.RS 4
Gain en accessibilité lors de l'ajout du chemin, nul si le chemin et vide 
.RE
.PP

.SS "\fBEvaluation\fP& LocalSearch::get_evaluation ()\fC [inline]\fP"
Accesseur sur l'\fBEvaluation\fP 
.PP
\fBRenvoie:\fP
.RS 4
Une référence sur l'évaluation, modifiable 
.RE
.PP

.SS "\fBField\fP& LocalSearch::get_field ()\fC [inline]\fP"
Accesseur sur la surface de l'\fBEvaluation\fP 
.PP
\fBRenvoie:\fP
.RS 4
Une référence sur la surface, modifiable 
.RE
.PP

.SS "list< \fBPath\fP * > * LocalSearch::getPaths (const \fBCoordinates\fP & coord1, const \fBCoordinates\fP & coord2)"
Cherche tous les chemins 'directs' possibles entre deux routes\&. Ces chemins ne doivent pas contenir de routes aller de manière directe d'un point à l'autre, pas de 'détours' pour éviter une route\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIcoord1\fP Coordonnées de la première route 
.br
\fIcoord2\fP Coordonnées de la seconde route 
.RE
.PP
\fBRenvoie:\fP
.RS 4
Un pointeur sur une liste de pointeurs sur les différents chemin possibles 
.RE
.PP

.SS "void LocalSearch::initSolution ()"
Relie les entrées et sorties entre elles, de manière directe
.PP
.SS ""
.PP
Création et améliorations d'une solution 
.SS ""


.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour Urbanisme à partir du code source\&.

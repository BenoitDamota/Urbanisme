<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_field" kind="class" language="C++" prot="public">
    <compoundname>Field</compoundname>
    <includes refid="_field_8h" local="no">Field.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_field_1a6baa2ec69d89a224f2cf96af8eac9250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Field::resizeWithDimensions</definition>
        <argsstring>()</argsstring>
        <name>resizeWithDimensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Redéfinit la taille du vecteur de vecteur d&apos;états selon le nombre de lignes et de colonnes contenues dans la classe. On utilise la fonction resize(). Attention, les données contenues dans le vecteur peuvent être modifiées</para><para><heading level="6"></heading>
</para><para>Setters <heading level="6"></heading>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="73" column="1" bodyfile="Engine/Field.cpp" bodystart="21" bodyend="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_field_1a400b4301fd5d8286827a1032fcd74ec1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Field::show_ins_and_outs</definition>
        <argsstring>() const </argsstring>
        <name>show_ins_and_outs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Impression sur la sortie standard des entrées et sorties de la surface</para><para><heading level="6"></heading>
</para><para>Affichage <heading level="6"></heading>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="159" column="1" bodyfile="Engine/Field.cpp" bodystart="37" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1ac8967b315219b2f8bc7728028e08c348" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Field::show_states</definition>
        <argsstring>() const </argsstring>
        <name>show_states</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Impression sur la sortie standard de tous les états des parcelles de la surface </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="163" column="1" bodyfile="Engine/Field.cpp" bodystart="45" bodyend="55"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_field_1a076fac595112044eb8acd3321a1077af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Field::contains</definition>
        <argsstring>(int x, int y) const </argsstring>
        <name>contains</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>=== Fonctions sur les coordonnées === Effectue un test d&apos;appartenance des coordonnées à la matrice <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>abscisse de la coordonnée </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>ordonnée de la coordonnée </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true si la coordonnée appartient à la matrice</para></simplesect>
<heading level="6"></heading>
</para><para>=== Fonctions sur les coordonnées ===/// <heading level="6"></heading>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="172" column="1" bodyfile="Engine/Field.cpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a922548c81c4017574936f3820d9654c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Field::contains</definition>
        <argsstring>(const Coordinates &amp;coord) const </argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Effectue un test d&apos;appartenance des coordonnées à la matrice <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnées de la position </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true si la coordonnée appartient à la matrice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="178" column="1" bodyfile="Engine/Field.cpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a1be958fe3bee4fca95b1cd10e85283a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Field::nextCoordinates</definition>
        <argsstring>(Coordinates *coord) const </argsstring>
        <name>nextCoordinates</name>
        <param>
          <type><ref refid="class_coordinates" kindref="compound">Coordinates</ref> *</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifie la coordonnée en entrée pour obtenir celle qu&apos;elle précède Agit comme une itération sur l&apos;ensemble des coordonnées de la surface <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnée courante, va être modifiée pour devenir sa &quot;suivante&quot;. Elle est non modifiée si il n&apos;y a pas de suivante. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vrai si il y a une coordonnées, faux si on est à la fin ou en dehors de la surface </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="187" column="1" bodyfile="Engine/Field.cpp" bodystart="75" bodyend="112"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_field_1a6be516dfe903d18d047983c044eda493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Field::generateRandomSolution</definition>
        <argsstring>()</argsstring>
        <name>generateRandomSolution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>=== Recherche de solutions === Doit générer une solution réalisable aléatoire</para><para><heading level="6"></heading>
</para><para>=== Recherche de solutions ===/ <heading level="6"></heading>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="243" column="1" bodyfile="Engine/Field.cpp" bodystart="286" bodyend="294"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_field_1ab3e49fecc6c0c5eed1d07b761f35b8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Field::generateInsAndOuts</definition>
        <argsstring>(unsigned nb)</argsstring>
        <name>generateInsAndOuts</name>
        <param>
          <type>unsigned</type>
          <declname>nb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>=== Méthodes générales === Crée aléatoirement des entrées et sorties <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>nombre d&apos;entrées et sorties à générer</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="6"></heading>
</para><para>=== Méthodes générales ===/ <heading level="6"></heading>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="195" column="1" bodyfile="Engine/Field.cpp" bodystart="119" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1ab7f0de6f1ee4d0a45b8d4946783d8738" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &gt; *</type>
        <definition>std::list&lt; Coordinates &gt; * Field::getNeighbourRoads</definition>
        <argsstring>(const Coordinates &amp;coord) const </argsstring>
        <name>getNeighbourRoads</name>
        <param>
          <type>const <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recherche des portions de routes qui sont concomitantes à la parcelle courante <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnées de la parcelle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>une liste de routes adjacentes à la parcelle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="see"><para>améliorer les listes, utiliser pointeurs ou non ? </para></simplesect>
</para>        </inbodydescription>
        <location file="Engine/Field.h" line="213" column="1" bodyfile="Engine/Field.cpp" bodystart="149" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1ad38e9b89a990280215681e53798ccc70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &gt; *</type>
        <definition>std::list&lt; Coordinates &gt; * Field::getServingRoads</definition>
        <argsstring>(const Coordinates &amp;coord, unsigned servingDistance) const </argsstring>
        <name>getServingRoads</name>
        <param>
          <type>const <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>servingDistance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recherche des portions de routes qui peuvent désservir la parcelle <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnées de la parcelle à desservir </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>servingDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance maximale à laquelle un route peut desservir une parcelle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>une liste de routes distance inférieure ou égale à la distance de desserte </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="see"><para>on vérifie serve_dist² parcelles, alors qu&apos;on pourrait en vérifier ?? (moins) </para></simplesect>
</para>        </inbodydescription>
        <location file="Engine/Field.h" line="220" column="1" bodyfile="Engine/Field.cpp" bodystart="200" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a32d5e1cef872d4bc1b0c5edc8e1693bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Field::defineUsables</definition>
        <argsstring>(unsigned servingDistance)</argsstring>
        <name>defineUsables</name>
        <param>
          <type>unsigned</type>
          <declname>servingDistance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Définit les parcelles dans le voisinage d&apos;une route comme étant exploitables <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>servingDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance maximale du voisinage </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="see"><para>je vérifie que chaque route a un voisin (en cherchant tous ses voisins, </para></simplesect>
</para>        </inbodydescription>
        <location file="Engine/Field.h" line="236" column="1" bodyfile="Engine/Field.cpp" bodystart="255" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1acf140549c6ee19c9a4b813f60acdb7fa" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Field::isRoadAndNeighbourOf</definition>
        <argsstring>(const Coordinates &amp;neighbour, const Coordinates &amp;coord, unsigned servingDistance) const </argsstring>
        <name>isRoadAndNeighbourOf</name>
        <param>
          <type>const <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
          <declname>neighbour</declname>
        </param>
        <param>
          <type>const <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>servingDistance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vérifie que deux parcelles sont voisines, supposant une distance de voisinage <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>neighbour</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnées de la parcelle qui peut être voisine de l&apos;autre </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnées de la seconde parcelle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>servingDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance de desserte des routes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vrai si la première parcelle est une route, voisine de la seconde </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="205" column="1" bodyfile="Engine/Field.cpp" bodystart="141" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a1fce4188b56f3b4d595adc700c188e4b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Field::hasServingRoad</definition>
        <argsstring>(const Coordinates &amp;coord, unsigned servingDistance) const </argsstring>
        <name>hasServingRoad</name>
        <param>
          <type>const <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>servingDistance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vérifie que la parcelle a un voisin <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnées de la parcelle à desservir </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>servingDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance de desserte des routes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vrai si la parcelle est desservie par au moins une route </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="see"><para>on vérifie serve_dist² parcelles, alors qu&apos;on pourrait en vérifier ?? (moins) </para></simplesect>
</para>        </inbodydescription>
        <location file="Engine/Field.h" line="229" column="1" bodyfile="Engine/Field.cpp" bodystart="229" bodyend="253"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_field_1a59c5e377de8894dc7675961d5d53cd6f" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned Field::nb_cols</definition>
        <argsstring></argsstring>
        <name>nb_cols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="20" column="1" bodyfile="Engine/Field.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_field_1a007005989d2db13063f25c3d5156e017" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned Field::nb_rows</definition>
        <argsstring></argsstring>
        <name>nb_rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="20" column="1" bodyfile="Engine/Field.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_field_1a83c910de1f26c582c601b8065df8eb7f" prot="private" static="no" mutable="no">
        <type>std::list&lt; <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &gt;</type>
        <definition>std::list&lt;Coordinates&gt; Field::ins_outs</definition>
        <argsstring></argsstring>
        <name>ins_outs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="21" column="1" bodyfile="Engine/Field.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_field_1a565770271ebc869961705df2ff8ffd68" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; State &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;State&gt; &gt; Field::parcels</definition>
        <argsstring></argsstring>
        <name>parcels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="23" column="1" bodyfile="Engine/Field.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_field_1ace906b0a3a8057fd29feb3208738da8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Field::Field</definition>
        <argsstring>(unsigned width, unsigned height)</argsstring>
        <name>Field</name>
        <param>
          <type>unsigned</type>
          <declname>width</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructeur de la classe <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Largeur à définir de la surface </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>Hauteur à définir de la surface </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="31" column="1" bodyfile="Engine/Field.cpp" bodystart="6" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a45d6e6d09b8f8e46de62b40119d62c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Field::~Field</definition>
        <argsstring>()</argsstring>
        <name>~Field</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="32" column="1" bodyfile="Engine/Field.cpp" bodystart="12" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1ae12b592877dcb38b0bb8cbc8270b3cf9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned Field::get_width</definition>
        <argsstring>() const </argsstring>
        <name>get_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accesseur sur le nombre de colonnes -la largeur- de la surface <simplesect kind="return"><para>La largeur de la surface </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="39" column="1" bodyfile="Engine/Field.h" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a85cbce7b8cf8fc7d33bc9c5d7637fd0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned Field::get_height</definition>
        <argsstring>() const </argsstring>
        <name>get_height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accesseur sur le nombre de lignes -la hauteur- de la surface <simplesect kind="return"><para>La hauteur de la surface </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="44" column="1" bodyfile="Engine/Field.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a43e0689560cee653e8eece3778cae287" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned Field::getNbParcels</definition>
        <argsstring>() const </argsstring>
        <name>getNbParcels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Donne le nombre de parcelles de la surface <simplesect kind="return"><para>Le nombre de parcelles, nombre de ligne facteur nombre de colonnes, un entier non signé </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="51" column="1" bodyfile="Engine/Field.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1ac3c26822851b29438f6f9f0a6b505e3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Field::set_width</definition>
        <argsstring>(unsigned width)</argsstring>
        <name>set_width</name>
        <param>
          <type>unsigned</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mutateur sur le nombre de colonnes -la largeur- de la surface <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>La nouvelle largeur de la surface </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="58" column="1" bodyfile="Engine/Field.h" bodystart="58" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a820a5f4fcae3cd53264b4ec87748fe3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Field::set_height</definition>
        <argsstring>(unsigned height)</argsstring>
        <name>set_height</name>
        <param>
          <type>unsigned</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mutateur sur le nombre de lignes -la hauteur- de la surface <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>La nouvelle hauteur de la surface </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="64" column="1" bodyfile="Engine/Field.h" bodystart="64" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a646c0e7d9c66c86b776b349eb9e08449" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Field::add_in_out</definition>
        <argsstring>(const Coordinates &amp;coord)</argsstring>
        <name>add_in_out</name>
        <param>
          <type>const <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ajoute une entrée/sortie à partir de coordonnées <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnées de l&apos;E/S </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="79" column="1" bodyfile="Engine/Field.h" bodystart="79" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a9d9b3de65984659c77ee86918362f4f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Field::add_in_out</definition>
        <argsstring>(unsigned col, unsigned row)</argsstring>
        <name>add_in_out</name>
        <param>
          <type>unsigned</type>
          <declname>col</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ajoute une entrée/sortie à partir de coordonnées <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Colonne de l&apos;E/S </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Ligne de l&apos;E/S </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="86" column="1" bodyfile="Engine/Field.h" bodystart="86" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a5db3ca54219102e50ff4d9e0b9753d0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Field::add_road</definition>
        <argsstring>(unsigned col, unsigned row)</argsstring>
        <name>add_road</name>
        <param>
          <type>unsigned</type>
          <declname>col</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ajoute une route à partir de coordonnées <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Colonne de la route </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Ligne de la route </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="94" column="1" bodyfile="Engine/Field.h" bodystart="94" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a6dda638994b360483e67514a9ede9f15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>State</type>
        <definition>State Field::at</definition>
        <argsstring>(const Coordinates &amp;pos) const </argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>=== Operators === Retourne la parcelle de la surface aux coordonnées passées en paramètre <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnées de la parcelle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>L&apos;état de la parcelle à la position des coordonnées, un State </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="104" column="1" bodyfile="Engine/Field.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a9a7a478e7f5d978e181b7fca88ddad3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>State</type>
        <definition>State Field::operator[]</definition>
        <argsstring>(const Coordinates &amp;pos) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opérateur [] avec des coordonnées sur la surface, retourne la parcelle de la surface aux coordonnées passées en paramètre <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordonnées de la parcelle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>L&apos;état de la parcelle à la position des coordonnées, un State </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="111" column="1" bodyfile="Engine/Field.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a0b3e16dd4a4591025f0804e28c055ed4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; State &gt; &gt;::const_iterator</type>
        <definition>std::vector&lt;std::vector&lt;State&gt; &gt;::const_iterator Field::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>begin </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>un itérateur constant sur la première parcelle du <ref refid="class_field" kindref="compound">Field</ref> </para></simplesect>
<simplesect kind="see"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="118" column="1" bodyfile="Engine/Field.h" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a83fc4c16a08cb4f8821baa02a93919f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; State &gt; &gt;::const_iterator</type>
        <definition>std::vector&lt;std::vector&lt;State&gt; &gt;::const_iterator Field::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>end </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>un itérateur constant sur la dernière parcelle du <ref refid="class_field" kindref="compound">Field</ref> </para></simplesect>
<simplesect kind="see"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="124" column="1" bodyfile="Engine/Field.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a26b4af177a6fc1f44c1eb6d134d93e8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; State &gt; &gt;::iterator</type>
        <definition>std::vector&lt;std::vector&lt;State&gt; &gt;::iterator Field::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>begin </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>un itérateur sur la première parcelle du <ref refid="class_field" kindref="compound">Field</ref> </para></simplesect>
<simplesect kind="see"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="130" column="1" bodyfile="Engine/Field.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a7c2df079326a7a28ab5e664acce0e80a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; State &gt; &gt;::iterator</type>
        <definition>std::vector&lt;std::vector&lt;State&gt; &gt;::iterator Field::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>end </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>un itérateur sur la dernière parcelle du <ref refid="class_field" kindref="compound">Field</ref> </para></simplesect>
<simplesect kind="see"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="136" column="1" bodyfile="Engine/Field.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_field_1a7ef9953a89e48972a0b6ba2652707911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Field::deleteUselessRoad</definition>
        <argsstring>()</argsstring>
        <name>deleteUselessRoad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TODO </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="248" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_field_1aff23182d4181acc76ba1fee91946d8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::vector&lt; State &gt;::const_iterator &amp;</type>
        <definition>std::vector&lt;State&gt;::const_iterator&amp; std::vector</definition>
        <argsstring>()</argsstring>
        <name>std::vector</name>
        <briefdescription>
<para>std::vector&lt;State&gt;::const_iterator::operator ++ </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Un itérateur constant sur la surface </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="144" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_field_1aed3a78975e6a28b6f32be7c7f1a9e983" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_coordinates" kindref="compound">Coordinates</ref> &amp;</type>
        <definition>static Coordinates&amp; Field::first</definition>
        <argsstring>()</argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retourne la première coordonée de la matrice, elle peut ensuite être modifée pour servir d&apos;itérateur à l&apos;aide de <ref refid="class_field_1a1be958fe3bee4fca95b1cd10e85283a8" kindref="member">nextCoordinates()</ref> <simplesect kind="return"><para>une référence, non constante, sur la première coordonnée de la matrice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Engine/Field.h" line="151" column="1" bodyfile="Engine/Field.h" bodystart="151" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Classe représentant la surface -le terrain- et contenant les opérations que l&apos;on effectue sur celui-ci. L&apos;état d&apos;une instance de cette classe à la fin de l&apos;algorithme représente une solution trouvée après la recherche. On peut donc avoir plusieurs <ref refid="class_field" kindref="compound">Field</ref> lors d&apos;une exécution. </para>    </detaileddescription>
    <location file="Engine/Field.h" line="17" column="1" bodyfile="Engine/Field.h" bodystart="16" bodyend="249"/>
    <listofallmembers>
      <member refid="class_field_1a646c0e7d9c66c86b776b349eb9e08449" prot="public" virt="non-virtual"><scope>Field</scope><name>add_in_out</name></member>
      <member refid="class_field_1a9d9b3de65984659c77ee86918362f4f8" prot="public" virt="non-virtual"><scope>Field</scope><name>add_in_out</name></member>
      <member refid="class_field_1a5db3ca54219102e50ff4d9e0b9753d0b" prot="public" virt="non-virtual"><scope>Field</scope><name>add_road</name></member>
      <member refid="class_field_1a6dda638994b360483e67514a9ede9f15" prot="public" virt="non-virtual"><scope>Field</scope><name>at</name></member>
      <member refid="class_field_1a0b3e16dd4a4591025f0804e28c055ed4" prot="public" virt="non-virtual"><scope>Field</scope><name>begin</name></member>
      <member refid="class_field_1a26b4af177a6fc1f44c1eb6d134d93e8b" prot="public" virt="non-virtual"><scope>Field</scope><name>begin</name></member>
      <member refid="class_field_1a076fac595112044eb8acd3321a1077af" prot="public" virt="non-virtual"><scope>Field</scope><name>contains</name></member>
      <member refid="class_field_1a922548c81c4017574936f3820d9654c9" prot="public" virt="non-virtual"><scope>Field</scope><name>contains</name></member>
      <member refid="class_field_1a32d5e1cef872d4bc1b0c5edc8e1693bd" prot="public" virt="non-virtual"><scope>Field</scope><name>defineUsables</name></member>
      <member refid="class_field_1a7ef9953a89e48972a0b6ba2652707911" prot="public" virt="non-virtual"><scope>Field</scope><name>deleteUselessRoad</name></member>
      <member refid="class_field_1a83fc4c16a08cb4f8821baa02a93919f6" prot="public" virt="non-virtual"><scope>Field</scope><name>end</name></member>
      <member refid="class_field_1a7c2df079326a7a28ab5e664acce0e80a" prot="public" virt="non-virtual"><scope>Field</scope><name>end</name></member>
      <member refid="class_field_1ace906b0a3a8057fd29feb3208738da8b" prot="public" virt="non-virtual"><scope>Field</scope><name>Field</name></member>
      <member refid="class_field_1aed3a78975e6a28b6f32be7c7f1a9e983" prot="public" virt="non-virtual"><scope>Field</scope><name>first</name></member>
      <member refid="class_field_1ab3e49fecc6c0c5eed1d07b761f35b8ba" prot="public" virt="non-virtual"><scope>Field</scope><name>generateInsAndOuts</name></member>
      <member refid="class_field_1a6be516dfe903d18d047983c044eda493" prot="public" virt="non-virtual"><scope>Field</scope><name>generateRandomSolution</name></member>
      <member refid="class_field_1a85cbce7b8cf8fc7d33bc9c5d7637fd0f" prot="public" virt="non-virtual"><scope>Field</scope><name>get_height</name></member>
      <member refid="class_field_1ae12b592877dcb38b0bb8cbc8270b3cf9" prot="public" virt="non-virtual"><scope>Field</scope><name>get_width</name></member>
      <member refid="class_field_1a43e0689560cee653e8eece3778cae287" prot="public" virt="non-virtual"><scope>Field</scope><name>getNbParcels</name></member>
      <member refid="class_field_1ab7f0de6f1ee4d0a45b8d4946783d8738" prot="public" virt="non-virtual"><scope>Field</scope><name>getNeighbourRoads</name></member>
      <member refid="class_field_1ad38e9b89a990280215681e53798ccc70" prot="public" virt="non-virtual"><scope>Field</scope><name>getServingRoads</name></member>
      <member refid="class_field_1a1fce4188b56f3b4d595adc700c188e4b" prot="private" virt="non-virtual"><scope>Field</scope><name>hasServingRoad</name></member>
      <member refid="class_field_1a83c910de1f26c582c601b8065df8eb7f" prot="private" virt="non-virtual"><scope>Field</scope><name>ins_outs</name></member>
      <member refid="class_field_1acf140549c6ee19c9a4b813f60acdb7fa" prot="private" virt="non-virtual"><scope>Field</scope><name>isRoadAndNeighbourOf</name></member>
      <member refid="class_field_1a59c5e377de8894dc7675961d5d53cd6f" prot="private" virt="non-virtual"><scope>Field</scope><name>nb_cols</name></member>
      <member refid="class_field_1a007005989d2db13063f25c3d5156e017" prot="private" virt="non-virtual"><scope>Field</scope><name>nb_rows</name></member>
      <member refid="class_field_1a1be958fe3bee4fca95b1cd10e85283a8" prot="public" virt="non-virtual"><scope>Field</scope><name>nextCoordinates</name></member>
      <member refid="class_field_1a9a7a478e7f5d978e181b7fca88ddad3c" prot="public" virt="non-virtual"><scope>Field</scope><name>operator[]</name></member>
      <member refid="class_field_1a565770271ebc869961705df2ff8ffd68" prot="private" virt="non-virtual"><scope>Field</scope><name>parcels</name></member>
      <member refid="class_field_1a6baa2ec69d89a224f2cf96af8eac9250" prot="public" virt="non-virtual"><scope>Field</scope><name>resizeWithDimensions</name></member>
      <member refid="class_field_1a820a5f4fcae3cd53264b4ec87748fe3b" prot="public" virt="non-virtual"><scope>Field</scope><name>set_height</name></member>
      <member refid="class_field_1ac3c26822851b29438f6f9f0a6b505e3b" prot="public" virt="non-virtual"><scope>Field</scope><name>set_width</name></member>
      <member refid="class_field_1a400b4301fd5d8286827a1032fcd74ec1" prot="public" virt="non-virtual"><scope>Field</scope><name>show_ins_and_outs</name></member>
      <member refid="class_field_1ac8967b315219b2f8bc7728028e08c348" prot="public" virt="non-virtual"><scope>Field</scope><name>show_states</name></member>
      <member refid="class_field_1aff23182d4181acc76ba1fee91946d8e0" prot="public" virt="non-virtual"><scope>Field</scope><name>std::vector</name></member>
      <member refid="class_field_1a45d6e6d09b8f8e46de62b40119d62c60" prot="public" virt="non-virtual"><scope>Field</scope><name>~Field</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

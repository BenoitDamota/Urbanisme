{
  "name": "Urbanisme",
  "tagline": "TER visant à l'optimisation du placement de routes sur une surface, en maximisant les zones exploitables et leur accessibilité.",
  "body": "Projet TER : Urbanisme\r\n======================\r\n\r\n            Compilation Travis                   |                  License                     |\r\n------------------------------------------------ | -------------------------------------------- |\r\n[![Build Status](https://travis-ci.org/flodavid/Urbanisme.svg?branch=master)](https://travis-ci.org/flodavid/Urbanisme) | [![GPLv3 License](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://github.com/flodavid/Urbanisme/blob/master/COPYING.txt)\r\n\r\n[![SIM-CITY](https://github.com/flodavid/Urbanisme/blob/gh-pages/images/SimCity_shadows-logo.png)](https://flodavid.github.io/Urbanisme)\r\n\r\n## Organisation du travail et du développement\r\n\r\n### I. Etudes préliminaires :\r\n1. [x] Réflexions sur les applications et enjeux du problème \r\n2. [x] Recherche de travaux similaires\r\n3. [x] Réflexion sur les langages, outils et approches du problème\r\n\r\n### II. Fonctionnalités essentielles\r\n1. [x] Utilisation d'une classe Coordonnées, et création d'une classe représentant les paramètres du problème\r\n2. [x] Représentation du terrain : des entrées et sorties et d'une matrice d'états de la surface\r\n3. [x] Fonction d'évaluation complète du nombre de parcelles exploitables d'une solution\r\n4. [x] Calcul de la distance \"directe\" entre deux points, Manhattant et Euclidienne, avec tests correspondants\r\n5. [x] Calcul de la distance par les routes entre deux points : pathfinding\r\n6. [x] Fonction d'évaluation complète du ratio entre les distances \"directes\" et les distances\r\npar les routes\r\n\r\n### III. Ajouts futurs\r\n1. [x] Affichage et interaction avec une surface : Framework Qt\r\n2. [x] Créer une fonction de voisinage sur une solution afin d'effectuer une recherche locale\r\n3. [x] Ajouter des fonctions de mise à jour des valeurs et de l'évaluation d'une solution\r\n4. [x] Générer et évaluer des solutions et créer le front Pareto, puis l'afficher\r\n    - [x] Garder les valeurs d'évaluations des solutions dominées pour pouvoir les afficher en plus du front Pareto\r\n\r\n### IV. Améliorations et optimisations possibles\r\n+ [ ] Stocker les voisinages dans un vecteur de listes (avec couples : valeur-voisin ?)\r\n+ [x] Stocker les valeurs de distance par routes entre chaque parcelle et chaque autre parcelle ?\r\nOu entre chaque parcelles et ses suivantes ? J'utilise une matrice à 4 dimensions\r\n+ [ ] Transformer la matrice en un graphe ? pour mplémenter des algorithmes de type Dijkstra (boost-graph ?)\r\n+ [ ] Corriger les bugs \r\n    + [x] Des boutons reset et flush (revoir qui reset, ce qui est reset et sauvegardé et comment on le fait)\r\n    + [ ] Vérifier que l'évaluation est correcte\r\n    + [ ] Pourquoi ce n'est pas toujours la meilleure route qui est choisie (apparition de \"patés\")\r\n\r\n### V. Fonctionnalitées envisagées\r\n+ [ ] Prendre en compte la largeur des routes\r\n+ [ ] Changer la forme des cellules : hexagonales ...\r\n+ [ ] Ajouter des coefficients/couts sur les cellules et routes\r\n+ [ ] L'utilisateur demande un nombre de routes à ajouter \r\n    - [x] Pour maximiser le nombre d'utilisables\r\n    - [x] Pour augmenter l'accessibilité\r\n    - [ ] Pour améliorer les deux critères (avec une valuation des critères ? avec un alpha et un beta ?)\r\n    - [ ] Avec une planification sur le nombre de routes demandé, plutôt que des algos gloutons\r\n+ [x] Ajouter des couleurs à l'affichage d'une surface, selon les valeurs attribuées ou selon, pour répérer les \"points chauds\" : points qui on un rapport élevé distance \"directe\"/distance_Manhattan, avec la plus grande mauvaise accessibilité\r\n    + [x] Couleurs selon l'écart avec la moyenne\r\n    + [ ] Valeurs d'écart avec la moyenne en sur-impression ?\r\n+ [ ] Essayer différentes techniques : Vider la matrice au lieu de remplir (pb d'évaluation), algos génétique, ...\r\n+ [ ] Ajouter des types et contraintes de placement des parcelles\r\n+ [ ] Sauvegarde et chargement d'une solution ?\r\n\r\n\r\n## Algorithme et détailes techniques :\r\n### Algorithme\r\n- Pour ratio entre distance directe et par les routes, faire une moyenne ? un maximum ? garder total à coté ? Moyenne pour l'instant  (OK : Moyenne quadratique et ratio max possibles)\r\n\r\n### Questions :\r\n- Dans listes (`list<Coordinates>*`) utiliser pointeurs ? si oui, comment utiliser,\r\nou remplacer, `find(begin, end, val)` ?\r\n\r\n## Autres :\r\n+ Seulement 2 entrées/sorties : 3 Cas pour relier : ligne droite, ligne avec 2 coudes, Equerre (ligne avec 1 coude (ou 2n +1 ?)).\r\n+ Recherche locale : incrémentale\r\n+ On peut utiliser la distance euclidienne au lieu de la distance Manhattan.\r\n+ Distance par les routes : on passe par les routes les plus proches de la parcelle\r\n+ Pour définir exploitable, je vérifie si chaque parcelle a une route voisine et l'inverse lors des mises à jour. Définir toutes les voisins de chaque route supprimée ou ajoutée comme étant exploitable.\r\n+ S'est posée la question de comment trouver les routes à X parcelles de distance d'une parcelle donnée ?\r\n    - Actuellement, une recherche dans un de 2*X parcelles de coté est effectuée, \r\n    on garde les routes qui sont à moins de 2 de distance.\r\n    - Faudrait-il stocker les routes voisines d'une parcelle dans un vecteur de listes de paires d'une coordonnée et d'une distance ? ou juste une coordonnée ? OK : plutôt oui\r\n\r\n## Authors and Contributors\r\nProjet développé par @flodavid. Utilise gnuplot-cpp, développé par Jeremy Conlin (jeremit0@gmail.com)\r\n\r\n## Support or Contact\r\nVous pouvez me contacter à l'adresse [fl.david.53@gmail.com](mailto:fl.david.53@gmail.com)\r\n\r\n_Urbanisme_ est un logiciel libre, licencié sous la [GPLv3](https://www.gnu.org/licenses/gpl.html).\r\n_Urbanisme_ is free software, licensed under the [GPLv3](https://www.gnu.org/licenses/gpl.html).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
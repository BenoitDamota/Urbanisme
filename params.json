{
  "name": "Urbanisme",
  "tagline": "TER visant à l'optimisation du placement de routes sur une surface, en maximisant les zones exploitables et leur accessibilité.",
  "body": "Urbanisme\r\n=========\r\nTER visant à l'optimisation du placement de routes sur une surface, en maximisant\r\nles zones exploitables et leur accessibilité.\r\n\r\n                     License                 |\r\n-------------------------------------------- |\r\n[GPLv3 License](https://github.com/flodavid/Urbanisme/blob/master/COPYING.txt) |\r\n \r\n![SIM-CITY](http://eaassets-a.akamaihd.net/prod.simcity.com/sites/all/themes/prod-build/img/logo-simcity.png)\r\n\r\n## Organisation\r\n\r\n\r\n### I. Etudes préliminaires :\r\n1. [x] Réflexions sur les applications et enjeux du problème \r\n2. [x] Recherche de travaux similaires\r\n3. [x] Réflexion sur les langages, outils et approches du problème\r\n\r\n### II. Organisation du travail et du développement\r\n1. [x] Utilisation d'une classe Coordonnées, d'une classe représentant le terrain\r\net d'une classe représentant les paramètres du problème \r\n2. [x] Ajout des entrées et sorties et d'une matrice d'états de la surface\r\n3. [x] Fonction d'évaluation complète du nombre de parcelles exploitables d'une solution\r\n4. [x] Calcul de la distance \"directe\" entre deux points, Manhattant et Euclidienne,\r\navec tests correspondants\r\n5. [x] Calcul de la distance par les routes entre deux points\r\n6. [x] Fonction d'évaluation complète du ratio entre les distances \"directes\" et les distances\r\npar les routes\r\n\r\n### III. Ajouts futurs\r\n1. [x] Affichage d'une solution : Framework Qt\r\n2. [ ] Créer une fonction de voisinage sur une solution afin d'effectuer une recherche locale : En cours\r\n3. [ ] Ajouter des fonctions de mise à jour des valeurs et de l'évaluation d'une solution\r\n4. [ ] Générer des solutions et créer le front Pareto correspondant\r\n\r\n### IV. Améliorations possibles\r\n+ [ ] Stocker les voisinages dans un vecteur de listes (avec couples : valeur-voisin ?)\r\n+ [x] Stocker les valeurs de distance par routes entre chaque parcelle et chaque autre parcelle ?\r\nOu entre chaque parcelles et ses suivantes ? J'utilise une matrice à 4 dimensions\r\n+ [ ] Transformer la matrice en un graphe\r\n+ [ ] Implémenter des algorithmes de type Dijkstra (boost-graph ?)\r\n\r\n### V. Fonctionnalitées envisagées\r\n+ [ ] Changer la forme des cellules : hexagonales ...\r\n+ [ ] Ajouter des coefficients/couts sur les cellules et routes\r\n+ [ ] Ajouter des couleurs à l'affichage, selon les valeurs attribuées ou selon\r\nles \"points chauds\", qui on un rapport élevé distance \"directe\"/distance_Manhattan \r\n+ [ ] Ajouter des types et contraintes de placement des parcelles\r\n\r\n\r\n## Détails :\r\n+ On suppose que l'on est obligé de prendre la route la plus proche de la parcelle\r\npour se déplacer\r\n\r\n## Questions :\r\n### Algorithme/Objectifs\r\n- Comment trouver les routes à X parcelles de distance d'une parcelle donnée ?\r\n    - Actuellement, une recherche dans un de 2*X parcelles de coté est effectuée, \r\n    on garde les routes qui sont à moins de 2 de distance. OK : Parcourir les routes\r\n    - Faudrait-il stocker les routes voisines d'une parcelle dans un vecteur de listes\r\n     de paires d'une coordonnée et d'une distance ? ou juste une coordonnée ? OK : plutôt oui\r\n- Les E/S sont-elles bien des routes ? OK : Oui\r\n- Pour II.6, faire une moyenne ? un maximum ? garder total à coté ? OK : Moyenne pour l'instant\r\n    - Noté : moyenne 80 % (OK : Moyenne quadratique)\r\n    - Utiliser également distance euclidienne ? OK : plus tard\r\n    - Distance par les routes : compte la distance entre la parcelle et la première route ? OK : faire optimisation : \r\n        - [x] Prendre les routes les plus proches d'abord\r\n- Transformer en graphe (voir Code 2. et 4. )\r\n- Collection solutions, comment démarrer ? aléatoire ? voisinage ? Comment relier les E/S ?\r\n\r\n#### Autres :\r\n+ Seulement 2 entrées/sorties : 3 Cas pour relier : ligne droite, ligne avec 2 coudes, Equerre (ligne avec 1 coude (ou 2n +1 ?))\r\n+ Recherche locale : incrémentale\r\n\r\n### Authors and Contributors\r\nProjet développé par @flodavid\r\n\r\n### Support or Contact\r\nVous pouvez me contacter à l'adresse [fl.david.53@gmail.com](mailto:fl.david.53@gmail.com)\r\n_Urbanisme_ is free software, licensed under the [GPLv3](https://www.gnu.org/licenses/gpl.html).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}